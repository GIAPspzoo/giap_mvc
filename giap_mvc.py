# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GiapMVC
                                 A QGIS plugin
 przykładowy mvc dla GIAP-SPDP
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-11-21
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Sylwester Czarnecki
        email                : scz@giap.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtSql import QSqlDatabase, QSqlTableModel
from PyQt5.QtWidgets import QAction, QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .giap_mvc_view import GiapMVCView
from .road_view import RoadView
import os.path
from qgis.gui import QgsMapCanvas


class GiapMVCController(object):
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GiapMVC_{}.qm'.format(locale))
        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&MVC in GIAP')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        self.db_model = GiapMVCModel()
        self.road_model = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GiapMVC', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToDatabaseMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/giap_mvc/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'zxc'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginDatabaseMenu(
                self.tr(u'&MVC in GIAP'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""
        self.road_model = self.db_model.get_sqlmodel('drogi')
        if self.first_start:
            self.first_start = False
            self.dlg = GiapMVCView(self)
            self.road_dlg = RoadView()

        self.db_model.set_headers(self.road_model,
                                  self.db_model.road_headers)
        self.dlg.hide_columns(self.road_model.columnCount(),
                              self.db_model.road_headers.values())
        self.road_dlg.set_mapper(self.road_model,
                                 self.db_model.road_headers)
        self.dlg.reset_view()
        self.dlg.showMaximized()
        result = self.dlg.exec_()
        if result:
            pass
        QgsMapCanvas().refreshAllLayers()

    def add_record(self):
        row = self.road_model.rowCount()
        self.road_model.insertRow(row)
        self.road_dlg.mapper.setCurrentIndex(row)
        self.road_dlg.reset_mapper()

        self.road_dlg.show()
        result = self.road_dlg.exec_()
        if result:
            self.road_dlg.mapper.submit()
            self.road_model.submitAll()
        else:
            self.road_model.removeRow(row)

    def edit_record(self):
        rows = self.dlg.tableView.selectionModel().selectedRows()
        if rows:
            self.road_dlg.mapper.setCurrentModelIndex(rows[0])
            self.road_dlg.show()
            result = self.road_dlg.exec_()
            if result:
                self.road_dlg.mapper.submit()
                self.road_model.submitAll()
            else:
                self.road_dlg.mapper.revert()
                self.road_model.revertAll()

    def del_record(self):
        rows = self.dlg.tableView.selectionModel().selectedRows()
        if rows:
            if QMessageBox.question(
                    self.dlg,
                    "Usuwanie",
                    "Usunąć rekord?",
                    QMessageBox.Yes | QMessageBox.No) == QMessageBox.No:
                return
            self.road_model.removeRow(rows[0].row())
            self.road_model.submitAll()


class GiapMVCModel(QSqlTableModel):
    road_headers = {
        'Odcinek drogi': 1,
        'Numer drogi': 2,
        'Nazwa drogi': 3,
        'Kategoria': 4,
        'Klasa': 5,
        'Organ zarządzający': 6,
        'Nawierzchnia': 7,
        'Stan nawierzchni': 8,
        'Liczba pasów': 9,
        'Pas awaryjny': 10,
        'Liczba pasów awaryjnych': 11,
        'Data aktualizacji': 12,
        'Status': 13,
        'Uwagi': 14,
        'Liczba jezdni': 20,
        'Numer jezdni': 21,
        'Jednokierunkowa': 22,
    }

    def __init__(self):
        super(GiapMVCModel, self).__init__()
        self.db = self.get_database()

    @staticmethod
    def get_database():
        """
        Set connection to database file.
        :return: QSqlDatabase
        """
        dbfile = os.path.normpath('C:/Users/pajton3/Desktop/SKIERNIEWICE_SPDP/'
                                  'PLIKI_WEKTOROWE/drogowiec.sqlite')
        db = QSqlDatabase.addDatabase('QSPATIALITE', 'drogowiec')
        db.setDatabaseName(dbfile)
        db.open()
        return db

    def get_sqlmodel(self, table_name):
        """
        Prepares table model for further usage.
        :param table_name: String name of sql table
        :return: QSqlTableModel
        """
        sqlmodel = QSqlTableModel(db=self.db)
        sqlmodel.setTable(table_name)
        sqlmodel.setEditStrategy(QSqlTableModel.OnManualSubmit)
        sqlmodel.select()
        while sqlmodel.canFetchMore():
            sqlmodel.fetchMore()
        return sqlmodel

    @staticmethod
    def set_headers(model, headers):
        """
        Set 'human' headers for model columns
        :param model: QAbstractItemModel
        :param headers: dict
        """
        for header, column in headers.items():
            model.setHeaderData(column, QtCore.Qt.Horizontal, header)
